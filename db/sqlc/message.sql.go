// Code generated by sqlc. DO NOT EDIT.
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "message"(
    "group",
    "message",
    "sent_from",
    "sent_to"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, "group", message, sent_at, read, sent_from, sent_to
`

type CreateMessageParams struct {
	Group    string `json:"group"`
	Message  string `json:"message"`
	SentFrom int64  `json:"sent_from"`
	SentTo   int64  `json:"sent_to"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Group,
		arg.Message,
		arg.SentFrom,
		arg.SentTo,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Message,
		&i.SentAt,
		&i.Read,
		&i.SentFrom,
		&i.SentTo,
	)
	return i, err
}

const getLatestUnreadMessage = `-- name: GetLatestUnreadMessage :one
SELECT id, "group", message, sent_at, read, sent_from, sent_to FROM "message"
WHERE "sent_to" = $1 AND "read" = FALSE
ORDER BY "sent_at" desc
LIMIT 1
`

func (q *Queries) GetLatestUnreadMessage(ctx context.Context, sentTo int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getLatestUnreadMessage, sentTo)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Message,
		&i.SentAt,
		&i.Read,
		&i.SentFrom,
		&i.SentTo,
	)
	return i, err
}

const readMessageGroup = `-- name: ReadMessageGroup :exec
UPDATE "message"
SET "read" = TRUE
WHERE "group" = $1
`

func (q *Queries) ReadMessageGroup(ctx context.Context, group string) error {
	_, err := q.db.ExecContext(ctx, readMessageGroup, group)
	return err
}

const retrieveAll = `-- name: RetrieveAll :many
SELECT id, "group", message, sent_at, read, sent_from, sent_to FROM "message"
where "group" = $1
ORDER BY "sent_at"
LIMIT $2
OFFSET $3
`

type RetrieveAllParams struct {
	Group  string `json:"group"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) RetrieveAll(ctx context.Context, arg RetrieveAllParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, retrieveAll, arg.Group, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Message,
			&i.SentAt,
			&i.Read,
			&i.SentFrom,
			&i.SentTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
